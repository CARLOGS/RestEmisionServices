package sb.reports;import com.barcodelib.barcode.QRCode;import fe.pki.PKI;import java.awt.Graphics2D;import java.awt.Image;import java.awt.Rectangle;import java.awt.image.BufferedImage;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.FileInputStream;import java.io.InputStream;import java.text.NumberFormat;import java.util.HashMap;import java.util.Locale;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;import java.util.zip.ZipOutputStream;import javax.crypto.Cipher;import javax.imageio.ImageIO;import net.sf.jasperreports.engine.JRDefaultScriptlet;import net.sf.jasperreports.engine.JasperExportManager;import net.sf.jasperreports.engine.JasperFillManager;import net.sf.jasperreports.engine.JasperPrint;import net.sf.jasperreports.engine.data.JRXmlDataSource;import org.jdom.Document;import org.jdom.Namespace;import org.jdom.input.SAXBuilder;public class ReportUtils extends JRDefaultScriptlet{    public ReportUtils() {}    public static void main(String args[])    {        ReportUtils qty = new ReportUtils();        System.out.println(qty.getTextQuantity("843.67", "USD"));    }    public String cut(String cadena, int x) {    	return cutX(cadena, x);    }	private String cutX( String str, int x ) {		String resp = "";				if ( str.length() > x )			resp = str.substring(0, x) + "\n" + cutX( str.substring(x), x );		else resp = str;				return resp;	}    public String getTextQuantity(String s)    {        return getTextQuantity((new Double(s)).doubleValue());    }    public String getTextQuantity(String s, String moneda)    {        return getTextQuantity((new Double(s)).doubleValue(), moneda);    }    public String getTextQuantity(double d, String moneda)    {    	if (moneda == null || moneda.equals("")) moneda = "MNX";    	    	HashMap<String,String> mMoneda = new HashMap<String,String>();    	mMoneda.put("MNX","PESOS");    	mMoneda.put("USD","DOLARES");    	mMoneda.put("EUR","EUROS");    	    	HashMap<String,String> mTipoMoneda = new HashMap<String,String>();    	mTipoMoneda.put("MNX","M.N.");    	mTipoMoneda.put("USD","USD");    	mTipoMoneda.put("EUR","EUROS");    	        NumberFormat numberformat = NumberFormat.getNumberInstance();        numberformat.setMaximumFractionDigits(0);        numberformat.setMinimumIntegerDigits(2);        String s = "(";        String s1 = numberformat.format(100D * (d - (double)(long)d));                String mon = mMoneda.get(moneda.toUpperCase());        if ( mon == null ) mon = "PESOS";        String tipoMon = mTipoMoneda.get(moneda.toUpperCase());        if ( tipoMon == null ) tipoMon = "M.N.";                s = (new StringBuilder()).append(s).append(num2Text((long)d)).append( " " + mon + " " ).append(s1).append("/100 " + tipoMon + ")").toString();        return s;    }    public String getTextQuantity(double d)    {        NumberFormat numberformat = NumberFormat.getNumberInstance();        numberformat.setMaximumFractionDigits(0);        numberformat.setMinimumIntegerDigits(2);        String s = "(";        String s1 = numberformat.format(100D * (d - (double)(long)d));        s = (new StringBuilder()).append(s).append(num2Text((long)d)).append(" PESOS ").append(s1).append("/100 M.N.)").toString();        return s;    }    public String num2Text(double d)    {        String s = "";        if(d == 0.0D)            s = "CERO";        else        if(d == 1.0D)            s = "UN";        else        if(d == 2D)            s = "DOS";        else        if(d == 3D)            s = "TRES";        else        if(d == 4D)            s = "CUATRO";        else        if(d == 5D)            s = "CINCO";        else        if(d == 6D)            s = "SEIS";        else        if(d == 7D)            s = "SIETE";        else        if(d == 8D)            s = "OCHO";        else        if(d == 9D)            s = "NUEVE";        else        if(d == 10D)            s = "DIEZ";        else        if(d == 11D)            s = "ONCE";        else        if(d == 12D)            s = "DOCE";        else        if(d == 13D)            s = "TRECE";        else        if(d == 14D)            s = "CATORCE";        else        if(d == 15D)            s = "QUINCE";        else        if(d < 20D)            s = (new StringBuilder()).append("DIECI").append(num2Text(d - 10D)).toString();        else        if(d == 20D)            s = "VEINTE";        else        if(d < 30D)            s = (new StringBuilder()).append("VEINTI").append(num2Text(d - 20D)).toString();        else        if(d == 30D)            s = "TREINTA";        else        if(d == 40D)            s = "CUARENTA";        else        if(d == 50D)            s = "CINCUENTA";        else        if(d == 60D)            s = "SESENTA";        else        if(d == 70D)            s = "SETENTA";        else        if(d == 80D)            s = "OCHENTA";        else        if(d == 90D)            s = "NOVENTA";        else        if(d < 100D)            s = (new StringBuilder()).append(num2Text((int)(d / 10D) * 10)).append(" Y ").append(num2Text(d % 10D)).toString();        else        if(d == 100D)            s = "CIEN";        else        if(d < 200D)            s = (new StringBuilder()).append("CIENTO ").append(num2Text(d - 100D)).toString();        else        if((d == 200D) | (d == 300D) | (d == 400D) | (d == 600D) | (d == 800D))            s = (new StringBuilder()).append(num2Text((int)(d / 100D))).append("CIENTOS").toString();        else        if(d == 500D)            s = "QUINIENTOS";        else        if(d == 700D)            s = "SETECIENTOS";        else        if(d == 900D)            s = "NOVECIENTOS";        else        if(d < 1000D)            s = (new StringBuilder()).append(num2Text((int)(d / 100D) * 100)).append(" ").append(num2Text(d % 100D)).toString();        else        if(d == 1000D)            s = "MIL";        else        if(d < 2000D)            s = (new StringBuilder()).append("MIL ").append(num2Text(d % 1000D)).toString();        else        if(d < 1000000D)        {            s = (new StringBuilder()).append(num2Text((int)(d / 1000D))).append(" MIL").toString();            if(d % 1000D >= 1.0D)                s = (new StringBuilder()).append(s).append(" ").append(num2Text(d % 1000D)).toString();        } else        if(d == 1000000D)            s = "UN MILLON";        else        if(d < 2000000D)            s = (new StringBuilder()).append("UN MILLON ").append(num2Text(d % 1000000D)).toString();        else        if(d < 1000000000000D)        {            s = (new StringBuilder()).append(num2Text((long)(d / 1000000D))).append(" MILLONES").toString();            if(d - (double)((long)(d / 1000000D) * 0xf4240L) > 0.0D)                s = (new StringBuilder()).append(s).append(" ").append(num2Text(d - (double)((long)(d / 1000000D) * 0xf4240L))).toString();        } else        if(d == 1000000000000D)            s = "UN BILLON";        else        if(d < 2000000000000D)        {            s = (new StringBuilder()).append("UN BILLON ").append(num2Text(d - (double)(long)(d / 1000000000000D) * 1000000000000D)).toString();        } else        {            s = (new StringBuilder()).append(num2Text((long)(d / 1000000000000D))).append(" BILLONES").toString();            if(d - (double)(long)(d / 1000000000000D) * 1000000000000D > 0.0D)                s = (new StringBuilder()).append(s).append(" ").append(num2Text(d - (double)(long)(d / 1000000000000D) * 1000000000000D)).toString();        }        return s;    }    public byte[] getPdfRets(byte[] xml, byte[] zipReport, boolean cancelado, boolean vistaPre, byte[] logoPer) {        byte[] pdf = new byte[0];                HashMap<String, Object> parameters = new HashMap<String, Object>();        try {            // Genera Imágen 2D CodeBar            ByteArrayInputStream bin = new ByteArrayInputStream(xml);            SAXBuilder sax = new SAXBuilder();            Document doc = sax.build(bin);            Namespace ns = doc.getRootElement().getNamespace();                        // QR Images            {                String rfc = null;                String rRfc = null;                String regTrib = null;                String rTot = null;                String sello = null;                                rfc = doc.getRootElement().getChild("Emisor", ns).getAttributeValue("RFCEmisor");                if ( "Nacional".equals(doc.getRootElement().getChild("Receptor", ns).getAttributeValue("Nacionalidad")) )                    rRfc = doc.getRootElement().getChild("Receptor", ns).getChild("Nacional", ns).getAttributeValue("RFCRecep");                else                    rRfc = doc.getRootElement().getChild("Receptor", ns).getChild("Extranjero", ns).getAttributeValue("NumRegIdTrib");                rTot = doc.getRootElement().getChild("Totales", ns).getAttributeValue("montoTotRet");                Namespace tfd = Namespace.getNamespace("tfd", "http://www.sat.gob.mx/TimbreFiscalDigital");                if (                     doc.getRootElement().getChild("Complemento", ns) != null                     && doc.getRootElement().getChild("Complemento", ns).getChild("TimbreFiscalDigital", tfd) != null                 ) {                    Image img = get2DBarCode(                            rfc,                            rRfc,                            regTrib,                            rTot,                            doc.getRootElement()                            .getChild("Complemento", ns)                            .getChild("TimbreFiscalDigital", tfd)                            .getAttributeValue("UUID"),                            sello,                            false                    );                    parameters.put("2DCODEBAR", img);                }            }            JRXmlDataSource jrxmlds = new JRXmlDataSource(new ByteArrayInputStream(xml), "/Retenciones");            jrxmlds.setLocale(new Locale("sp", "MX"));            jrxmlds.setNumberPattern("#,##0.00");            parameters.put("CANCELADO", cancelado ? "0" : "1" );            parameters.put("VISTA", vistaPre ? "1" : "0" );            if ( logoPer != null )                try {                     parameters.put("LOGO_PERSONAL", getImage(logoPer));                } catch(Exception exi) {                    exi.printStackTrace(System.out);                }            InputStream in = setParameters(zipReport, parameters);            JasperPrint jp = JasperFillManager.fillReport(                    in,                    parameters,                    jrxmlds            );            jp.setProperty("net.sf.jasperreports.awt.ignore.missing.font", "true");            jp.setProperty("net.sf.jasperreports.default.font.name", "Arial");            pdf = JasperExportManager.exportReportToPdf(jp);        } catch (Exception ex) {            ex.printStackTrace(System.err);        }        return pdf;    }        public byte[] getPdfPago(byte[] xml, byte[] zipReport, boolean cancelado, boolean vistaPre, byte[] logoPer, String moneda, String tipoDoc) {        return getPdf(xml, zipReport, cancelado, vistaPre,logoPer, moneda, tipoDoc, "/Comprobante/Complemento/Pagos/Pago", true);    }    public byte[] getPdf(byte[] xml, byte[] zipReport, boolean cancelado, boolean vistaPre, byte[] logoPer, String moneda, String tipoDoc) {        return getPdf(xml, zipReport, cancelado, vistaPre,logoPer, moneda, tipoDoc, "/Comprobante/Conceptos/Concepto", false);    }    private byte[] getPdf(byte[] xml, byte[] zipReport, boolean cancelado, boolean vistaPre, byte[] logoPer, String moneda, String tipoDoc, String xpath, boolean pago) {        byte[] pdf = new byte[0];                HashMap<String, Object> parameters = new HashMap<String, Object>();        try {            // Genera Imágen 2D CodeBar            ByteArrayInputStream bin = new ByteArrayInputStream(xml);            SAXBuilder sax = new SAXBuilder();            Document doc = sax.build(bin);            Namespace ns = doc.getRootElement().getNamespace();                        String ver = doc.getRootElement().getAttributeValue("Version");            if ( ver == null )                ver = doc.getRootElement().getAttributeValue("version");            if ( ver != null ) {                String rfc = null;                String rRfc = null;                String regTrib = null;                String rTot = null;                String sello = null;                                if ( "3.2".equals(ver) ) {                    rfc = doc.getRootElement().getChild("Emisor", ns).getAttributeValue("rfc");                    rRfc = doc.getRootElement().getChild("Receptor", ns).getAttributeValue("rfc");                    rTot = doc.getRootElement().getAttributeValue("total");                } else if ( "3.3".equals(ver) ) {                    rfc = doc.getRootElement().getChild("Emisor", ns).getAttributeValue("Rfc");                    rRfc = doc.getRootElement().getChild("Receptor", ns).getAttributeValue("Rfc");                    regTrib = doc.getRootElement().getChild("Receptor", ns).getAttributeValue("NumRegIdTrib");                                        rTot = doc.getRootElement().getAttributeValue("Total");                    sello = doc.getRootElement().getAttributeValue("Sello");                }                Namespace tfd = Namespace.getNamespace("tfd", "http://www.sat.gob.mx/TimbreFiscalDigital");                if (                     doc.getRootElement().getChild("Complemento", ns) != null                     && doc.getRootElement().getChild("Complemento", ns).getChild("TimbreFiscalDigital", tfd) != null                 ) {                    Image img = get2DBarCode(                            rfc,                            rRfc,                            regTrib,                            rTot,                            doc.getRootElement()                            .getChild("Complemento", ns)                            .getChild("TimbreFiscalDigital", tfd)                            .getAttributeValue("UUID"),                            sello,                            pago                    );                    parameters.put("2DCODEBAR", img);                }            }            JRXmlDataSource jrxmlds = new JRXmlDataSource(new ByteArrayInputStream(xml), xpath);            jrxmlds.setLocale(new Locale("sp", "MX"));            jrxmlds.setNumberPattern("#,##0.00");            parameters.put("CANCELADO", cancelado ? "0" : "1" );            parameters.put("VISTA", vistaPre ? "1" : "0" );            parameters.put("MONEDA", moneda );            parameters.put("TIPO_DOC", tipoDoc );            if ( logoPer != null )                try { parameters.put("LOGO_PERSONAL", getImage(logoPer)); } catch(Exception exi) { exi.printStackTrace(System.out); }            InputStream in = setParameters(zipReport, parameters);            JasperPrint jp = JasperFillManager.fillReport(                    in,                    parameters,                    jrxmlds            );            jp.setProperty("net.sf.jasperreports.awt.ignore.missing.font", "true");            jp.setProperty("net.sf.jasperreports.default.font.name", "Arial");            pdf = JasperExportManager.exportReportToPdf(jp);        } catch (Exception ex) {            ex.printStackTrace(System.err);        }        return pdf;    }    private Image get2DBarCode(String rfcEmi, String rfcRec, String regTrib, String total, String uuid, String sello, boolean pago) throws Exception {        NumberFormat nf = NumberFormat.getInstance(new Locale("sp", "MX"));        nf.setMaximumFractionDigits(6);        nf.setMinimumFractionDigits(6);        nf.setMaximumIntegerDigits(10);        nf.setMinimumIntegerDigits(10);        nf.setGroupingUsed(false);        // Gen 2D CodeBar barcode         int uom = 1;        //  0 - Pixel, 1 - CM, 2 - Inch        int resolution = 75;        int rotate = 0;     //  0 - 0, 1 - 90, 2 - 180, 3 - 270        float moduleSize = 0.100f;        // save barcode in "generated" folder//    BufferedImage bi = new BufferedImage(118,118,BufferedImage.TYPE_BYTE_BINARY);        BufferedImage bi = new BufferedImage(118, 118, BufferedImage.TYPE_BYTE_BINARY);        Graphics2D g = (Graphics2D) bi.getGraphics();        QRCode barcode = new QRCode();//        barcode.setData("?re=" + rfcEmi + "&rr=" + rfcRec + "&tt=" + nf.format(Double.parseDouble(total)) + "&id=" + uuid + (sello != null && sello.length() > 8 ? "&fe=" + sello.substring(sello.length() - 8) : ""));        barcode.setData(            (!pago ? "https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx" : "") +            "?id=" + uuid +            "&re=" + rfcEmi +            (pago && regTrib != null && !regTrib.isEmpty() ? "" : "&rr=" + rfcRec) +            "&tt=" + nf.format(Double.parseDouble(total)) +            (!pago && (sello != null) && (sello.length() > 8) ? "&fe=" + sello.substring(sello.length() - 8) : "") +            (pago && regTrib != null && !regTrib.isEmpty() ? "&nr=" + regTrib : "" )        );        // barcode.setDataMode(QRCode.MODE_BYTE);        barcode.setDataMode(QRCode.MODE_AUTO);        barcode.setVersion(10);        barcode.setEcl(QRCode.ECL_M);        barcode.setUOM(uom);        barcode.setModuleSize(moduleSize);        barcode.setLeftMargin(0.1f);        barcode.setRightMargin(0.1f);        barcode.setTopMargin(0.1f);        barcode.setBottomMargin(0.1f);        barcode.setResolution(resolution);        barcode.setRotate(rotate);        barcode.renderBarcode(g, new Rectangle());        // Insert IT image//    BufferedImage img = ImageIO.read(getClass().getResourceAsStream("/sb/emitir/resources/if_logo_f.jpg"));//    g.drawImage(img, (int)((bi.getWidth() - img.getWidth()) / 2), (int)((bi.getHeight() - img.getHeight()) / 2), null);        return bi;    }    private InputStream setParameters(byte[] zip, HashMap<String,Object> parameters) throws Exception {    	return new JasperZip().setUnZipBytes(zip, parameters);    }    private Image getImage(byte[] logoPer) throws Exception {        BufferedImage img = null;        //        try {            img = ImageIO.read(new ByteArrayInputStream(logoPer));//        } catch (IIOException e) {//            if ( e.getMessage().contains("Unsupported Image Type") )//                img = JPEGCodec.createJPEGDecoder(new ByteArrayInputStream(logoPer)).decodeAsBufferedImage();//            else//                throw e;//        }                return img;    }        private class JasperZip {        public byte[] getZipBytes(String[] fJaspers, String[] fImages) throws Exception {            ByteArrayOutputStream bout = new ByteArrayOutputStream();            ZipOutputStream zout = new ZipOutputStream(bout);            // Reports            for (String fJ : fJaspers) {                    ZipEntry zent = new ZipEntry("reports/" + fJ);                    zout.putNextEntry(zent);                    zout.write(getBytes(fJ));                    zout.closeEntry();            }            // Images            for (String fI : fImages) {                    ZipEntry zent = new ZipEntry("images/" + fI);                    zout.putNextEntry(zent);                    zout.write(getBytes(fI));                    zout.closeEntry();            }            zout.flush();            zout.close();            return bout.toByteArray();        }        public InputStream setUnZipBytes(byte[] bytes, HashMap<String,Object> parameters) throws Exception {            ByteArrayInputStream bais = new ByteArrayInputStream(bytes);            ZipInputStream zin = new ZipInputStream(bais);            ZipEntry zent = zin.getNextEntry();            byte[] b = new byte[512];            InputStream stream = null;            int item = 0;            while ( zent != null ) {                    ByteArrayOutputStream bout = new ByteArrayOutputStream();                    int buff = zin.read(b);                    while ( buff > 0 ) {                        bout.write(b, 0, buff);                        buff = zin.read(b);                    }                            String name = zent.getName().toUpperCase().split("\\/")[1];                            name = name.toUpperCase().replaceAll(" ","_").replaceAll("\\.","_");                    if ( "reports".equals(zent.getName().split("/")[0]) ) {                            if ( item == 0 )                                    stream = new ByteArrayInputStream( bout.toByteArray() );                            else                                    parameters.put(name,new ByteArrayInputStream( bout.toByteArray() ));                            item++;                    }                    if ( "images".equals(zent.getName().split("/")[0]) ) {                            BufferedImage bimg = ImageIO.read(new ByteArrayInputStream( bout.toByteArray() ));                            parameters.put(name,bimg);//	        		parameters.put(name,new ByteArrayInputStream( bout.toByteArray() ));                    }                    zin.closeEntry();                    zent = zin.getNextEntry();            }            zin.close();            return stream;        }        private byte[] getBytes(String file) throws Exception {            ByteArrayOutputStream baos = new ByteArrayOutputStream();            FileInputStream fis = new FileInputStream(file);            byte[] b = new byte[1024];            int buff = fis.read(b);            while( buff > 0 ) {                    baos.write(b, 0 , buff);                    buff = fis.read(b);            }            fis.close();            return baos.toByteArray();        }    }    public static byte[] getCrypZip(String name, byte[] xml, String pwd) throws Exception {        PKI pki = new PKI(PKI.algSHA2);        ByteArrayOutputStream baos = new ByteArrayOutputStream();        ZipOutputStream zout = new ZipOutputStream(baos);        ZipEntry zent = new ZipEntry(name);        zout.putNextEntry(zent);        zout.write(xml);        zout.closeEntry();        zout.flush();        zout.close();        return pki.cipher_bytes(baos.toByteArray(), pwd, "Blowfish", Cipher.ENCRYPT_MODE);    }    public static  byte[] getCrypUnZip(byte[] zip, String pwd) throws Exception {        PKI pki = new PKI(PKI.algSHA2);        ByteArrayOutputStream baos = new ByteArrayOutputStream();        ZipInputStream zin = new ZipInputStream(new ByteArrayInputStream(pki.cipher_bytes(zip, pwd, "Blowfish", Cipher.DECRYPT_MODE)));        zin.getNextEntry();        int b = zin.read();        while( b != -1 ) {            baos.write(b);            b = zin.read();        }        zin.closeEntry();        zin.close();        return baos.toByteArray();    }    public byte[] getUnZip(byte[] zip) throws Exception {        ByteArrayOutputStream baos = new ByteArrayOutputStream();        ZipInputStream zin = new ZipInputStream(new ByteArrayInputStream(zip));        zin.getNextEntry();        int b = zin.read();        while( b != -1 ) {            baos.write(b);            b = zin.read();        }        zin.closeEntry();        zin.close();        return baos.toByteArray();    }}